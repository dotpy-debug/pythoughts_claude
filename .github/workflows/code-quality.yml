name: Code Quality Checks

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

# Cancel in-progress runs for the same workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  # Fail fast on errors
  CI: true

jobs:
  # Job 1: Comprehensive Linting and Type Checking
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --legacy-peer-deps

      # Prettier check (format validation)
      - name: Check code formatting
        run: npm run format:check
        continue-on-error: false

      # ESLint check (code quality)
      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      # TypeScript compilation check
      - name: Run TypeScript type checking
        run: npm run typecheck
        continue-on-error: false

      # Upload lint results as artifacts
      - name: Archive lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: |
            eslint-report.json
            typescript-errors.txt
          retention-days: 7
          if-no-files-found: ignore

  # Job 2: Unit Tests with Coverage
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --legacy-peer-deps

      # Run unit tests
      - name: Run unit tests
        run: npm run test:unit
        continue-on-error: false

      # Generate coverage report
      - name: Generate coverage report
        run: npm run test:coverage

      # Fail if coverage is below threshold
      - name: Check coverage thresholds
        run: |
          echo "Checking test coverage thresholds..."
          # Coverage is already enforced in vitest.config.ts (70% threshold)
          echo "Coverage check passed!"

      # Upload coverage to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: unit-tests-coverage
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

      # Upload coverage artifact
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  # Job 3: Build Verification (Both Vite and Next.js)
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        build-type: [vite, next]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --legacy-peer-deps

      # Build Vite app
      - name: Build Vite application
        if: matrix.build-type == 'vite'
        run: npm run build
        env:
          NODE_ENV: production

      # Build Next.js app
      - name: Build Next.js application
        if: matrix.build-type == 'next'
        run: npm run build:next
        env:
          NODE_ENV: production

      # Verify Vite build output
      - name: Verify Vite build output
        if: matrix.build-type == 'vite'
        run: |
          if [ ! -d "dist" ]; then
            echo "‚ùå Build failed: dist directory not found"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "‚ùå Build failed: index.html not found"
            exit 1
          fi
          echo "‚úÖ Vite build verification passed"

      # Verify Next.js build output
      - name: Verify Next.js build output
        if: matrix.build-type == 'next'
        run: |
          if [ ! -d ".next" ]; then
            echo "‚ùå Build failed: .next directory not found"
            exit 1
          fi
          echo "‚úÖ Next.js build verification passed"

      # Analyze bundle size (Vite)
      - name: Analyze Vite bundle size
        if: matrix.build-type == 'vite'
        run: |
          echo "üì¶ Vite bundle size analysis:"
          du -sh dist/
          du -sh dist/assets/ || echo "No assets directory"

      # Analyze bundle size (Next.js)
      - name: Analyze Next.js bundle size
        if: matrix.build-type == 'next'
        run: |
          echo "üì¶ Next.js bundle size analysis:"
          du -sh .next/
          du -sh .next/static/ || echo "No static directory"

      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.build-type }}
          path: |
            dist/
            .next/
          retention-days: 7

  # Job 4: Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Run npm audit
      - name: Run npm audit
        run: npm audit --audit-level=moderate --legacy-peer-deps
        continue-on-error: true

      # Check for known vulnerabilities in dependencies
      - name: Run dependency security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  # Job 5: Commit Message Validation (for PRs)
  commit-message-validation:
    name: Validate Commit Messages
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate commit messages
        run: |
          echo "Validating commit messages..."
          commits=$(git log origin/${{ github.base_ref }}..HEAD --pretty=format:"%s")

          regex='^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?: .{1,100}'

          failed=0
          while IFS= read -r commit; do
            if ! echo "$commit" | grep -qE "$regex"; then
              echo "‚ùå Invalid commit message: $commit"
              failed=1
            else
              echo "‚úÖ Valid: $commit"
            fi
          done <<< "$commits"

          if [ $failed -eq 1 ]; then
            echo ""
            echo "ERROR: Some commit messages don't follow Conventional Commits format"
            echo "Format: <type>(<scope>): <subject>"
            echo "Types: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert"
            exit 1
          fi

          echo "All commit messages are valid!"

  # Summary job - requires all quality checks to pass
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests, build-verification, security-scan]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          echo "Checking all quality gate results..."

          if [ "${{ needs.lint-and-typecheck.result }}" != "success" ]; then
            echo "‚ùå Lint and type check failed"
            exit 1
          fi

          if [ "${{ needs.unit-tests.result }}" != "success" ]; then
            echo "‚ùå Unit tests failed"
            exit 1
          fi

          if [ "${{ needs.build-verification.result }}" != "success" ]; then
            echo "‚ùå Build verification failed"
            exit 1
          fi

          if [ "${{ needs.security-scan.result }}" == "failure" ]; then
            echo "‚ö†Ô∏è Security scan had issues (continuing)"
          fi

          echo "‚úÖ All quality checks passed successfully!"

      # Post PR comment with results
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const statusEmoji = {
              success: '‚úÖ',
              failure: '‚ùå',
              cancelled: '‚ö†Ô∏è'
            };

            const results = {
              'Lint & Type Check': '${{ needs.lint-and-typecheck.result }}',
              'Unit Tests': '${{ needs.unit-tests.result }}',
              'Build Verification': '${{ needs.build-verification.result }}',
              'Security Scan': '${{ needs.security-scan.result }}'
            };

            let comment = '## üîç Code Quality Check Results\n\n';

            for (const [name, result] of Object.entries(results)) {
              const emoji = statusEmoji[result] || '‚ùì';
              comment += `${emoji} **${name}**: ${result}\n`;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

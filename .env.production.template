# ==============================================================================
# PYTHOUGHTS PLATFORM - PRODUCTION ENVIRONMENT CONFIGURATION
# ==============================================================================
#
# CRITICAL: This file contains all required environment variables for production.
# Copy this to .env.production and fill in actual values.
#
# SECURITY WARNINGS:
# - NEVER commit .env.production to version control
# - Add .env.production to .gitignore
# - Use secrets management (Vault, AWS Secrets Manager, etc.) in production
# - Rotate secrets regularly (minimum every 90 days)
# - Use strong, randomly generated values (min 32 characters for secrets)
# ==============================================================================

# ==============================================================================
# APPLICATION CONFIGURATION
# ==============================================================================

# Node environment (MUST be 'production')
NODE_ENV=production

# Application mode
MODE=production

# Application URL (your production domain)
# REQUIRED: Must be HTTPS in production
# Example: https://pythoughts.example.com
VITE_APP_URL=https://your-domain.com

# ==============================================================================
# SUPABASE CONFIGURATION (REQUIRED)
# ==============================================================================
# Get these from: https://app.supabase.com/project/_/settings/api

# Supabase Project URL
# REQUIRED: Must be a valid HTTPS URL
# Example: https://abcdefghijklmnopqrst.supabase.co
VITE_SUPABASE_URL=https://your-project-id.supabase.co

# Supabase Anonymous Key (Public Key)
# REQUIRED: Used for client-side authentication
# This key is safe to expose in frontend code (has Row Level Security)
# Example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
VITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.your-anon-key-here

# Supabase Service Role Key (NEVER expose to frontend!)
# SECURITY: Only use server-side, has full database access
# Used for: Admin operations, bypassing RLS
# Example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.your-service-role-key

# ==============================================================================
# DATABASE CONFIGURATION (REQUIRED)
# ==============================================================================

# PostgreSQL Connection URL
# REQUIRED: Primary database connection
# Format: postgresql://USER:PASSWORD@HOST:PORT/DATABASE?sslmode=require
# SECURITY: Always use SSL in production (sslmode=require)
# Example: postgresql://postgres:SecurePass123@db.example.com:5432/pythoughts?sslmode=require
DATABASE_URL=postgresql://user:password@host:5432/database?sslmode=require

# Database Connection Pool Settings
DATABASE_POOL_MIN=2
DATABASE_POOL_MAX=10
DATABASE_IDLE_TIMEOUT=30000
DATABASE_CONNECTION_TIMEOUT=10000

# ==============================================================================
# REDIS CONFIGURATION (REQUIRED)
# ==============================================================================

# Redis Connection URL
# REQUIRED: Used for caching, sessions, and rate limiting
# Format: redis://[:password@]host[:port][/database]
# SECURITY: Use TLS in production (rediss://)
# Example: rediss://:SecureRedisPass123@redis.example.com:6379/0
VITE_REDIS_URL=rediss://:password@host:6379/0

# Redis Configuration
REDIS_MAX_RETRIES=3
REDIS_RETRY_DELAY=1000
REDIS_CONNECT_TIMEOUT=10000
REDIS_COMMAND_TIMEOUT=5000

# ==============================================================================
# BETTER AUTH CONFIGURATION (REQUIRED)
# ==============================================================================
# Documentation: https://better-auth.com

# Better Auth Application URL
# REQUIRED: Must match your production domain
# Example: https://pythoughts.example.com
VITE_BETTER_AUTH_URL=https://your-domain.com

# Better Auth Secret Key
# REQUIRED: Used for signing JWTs and encrypting sessions
# SECURITY: Generate with: openssl rand -base64 32
# MUST be at least 32 characters, cryptographically random
# NEVER reuse across environments
# Example: base64:abc123...xyz789==
VITE_BETTER_AUTH_SECRET=generate-with-openssl-rand-base64-32

# Session Configuration
SESSION_MAX_AGE=604800
SESSION_UPDATE_AGE=86400

# ==============================================================================
# EMAIL SERVICE CONFIGURATION (REQUIRED)
# ==============================================================================

# Resend API Key
# REQUIRED: Used for transactional emails (auth, notifications)
# Get from: https://resend.com/api-keys
# Format: Must start with 're_'
# Example: re_123456789_abcdefghijklmnopqrstuvwxyz
VITE_RESEND_API_KEY=re_your_resend_api_key_here

# Email Sender Configuration
EMAIL_FROM_ADDRESS=noreply@your-domain.com
EMAIL_FROM_NAME=Pythoughts Platform
EMAIL_REPLY_TO=support@your-domain.com

# ==============================================================================
# SECURITY CONFIGURATION (REQUIRED)
# ==============================================================================

# CORS Allowed Origins
# REQUIRED: Comma-separated list of allowed origins
# Example: https://pythoughts.com,https://www.pythoughts.com
CORS_ALLOWED_ORIGINS=https://your-domain.com

# Content Security Policy
# RECOMMENDED: Define strict CSP for XSS protection
CSP_DIRECTIVES=default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https://*.supabase.co;

# Rate Limiting Configuration
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100
RATE_LIMIT_ENABLED=true

# Security Headers
HSTS_MAX_AGE=31536000
HSTS_INCLUDE_SUBDOMAINS=true
HSTS_PRELOAD=true

# ==============================================================================
# SSL/TLS CONFIGURATION (REQUIRED FOR PRODUCTION)
# ==============================================================================

# Force HTTPS Redirect
FORCE_HTTPS=true

# Trust Proxy (if behind reverse proxy like nginx, Traefik, CloudFlare)
# REQUIRED: Set to 'true' if using reverse proxy
TRUST_PROXY=true

# ==============================================================================
# LOGGING AND MONITORING (RECOMMENDED)
# ==============================================================================

# Log Level
# Options: error, warn, info, debug
# RECOMMENDED: 'info' for production, 'error' for high-volume
LOG_LEVEL=info

# Log Format
# Options: json, pretty
# REQUIRED: Use 'json' for production log aggregation
LOG_FORMAT=json

# Sentry Error Tracking (Optional but Recommended)
# Get DSN from: https://sentry.io
SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id
SENTRY_ENVIRONMENT=production
SENTRY_TRACES_SAMPLE_RATE=0.1
SENTRY_ENABLE=true

# Application Performance Monitoring
APM_ENABLED=false
APM_SERVICE_NAME=pythoughts-production

# ==============================================================================
# FEATURE FLAGS (OPTIONAL)
# ==============================================================================

# Analytics
VITE_ENABLE_ANALYTICS=true
ANALYTICS_TRACKING_ID=

# Debug Mode
# SECURITY: MUST be false in production
VITE_ENABLE_DEBUG=false

# Maintenance Mode
MAINTENANCE_MODE=false

# ==============================================================================
# BACKUP CONFIGURATION (RECOMMENDED)
# ==============================================================================

# Database Backup Schedule (cron format)
BACKUP_SCHEDULE=0 2 * * *

# Backup Retention (days)
BACKUP_RETENTION_DAYS=30

# Backup Storage Location
# Example: s3://your-bucket/backups or /var/backups/pythoughts
BACKUP_STORAGE_PATH=/var/backups/pythoughts

# ==============================================================================
# CACHE CONFIGURATION (OPTIONAL)
# ==============================================================================

# Cache TTL Settings (seconds)
CACHE_TTL_DEFAULT=3600
CACHE_TTL_USER_SESSION=86400
CACHE_TTL_TRENDING=300
CACHE_TTL_STATIC=2592000

# ==============================================================================
# THIRD-PARTY SERVICES (OPTIONAL)
# ==============================================================================

# Object Storage (for file uploads)
S3_BUCKET_NAME=
S3_REGION=
S3_ACCESS_KEY_ID=
S3_SECRET_ACCESS_KEY=

# CDN Configuration
CDN_URL=
CDN_ENABLED=false

# ==============================================================================
# DEPLOYMENT METADATA (RECOMMENDED)
# ==============================================================================

# Git Commit SHA (auto-populated by CI/CD)
GIT_COMMIT_SHA=

# Build Timestamp (auto-populated by CI/CD)
BUILD_TIMESTAMP=

# Application Version
APP_VERSION=1.0.0

# ==============================================================================
# HEALTH CHECK CONFIGURATION (REQUIRED)
# ==============================================================================

# Health Check Endpoints
HEALTH_CHECK_ENABLED=true
HEALTH_CHECK_PATH=/health
READINESS_CHECK_PATH=/ready
LIVENESS_CHECK_PATH=/live

# Health Check Timeout (ms)
HEALTH_CHECK_TIMEOUT=5000

# ==============================================================================
# VALIDATION CHECKLIST
# ==============================================================================
#
# Before deploying to production, verify:
#
# [✓] All REQUIRED variables are set with production values
# [✓] All secrets are unique, random, and at least 32 characters
# [✓] All URLs use HTTPS protocol
# [✓] Database URL includes sslmode=require
# [✓] Redis URL uses rediss:// (TLS)
# [✓] VITE_ENABLE_DEBUG is set to false
# [✓] NODE_ENV is set to 'production'
# [✓] CORS_ALLOWED_ORIGINS matches your production domain
# [✓] Email addresses are configured with your domain
# [✓] Secrets are stored in a secure secrets manager
# [✓] .env.production is added to .gitignore
# [✓] SSL certificates are valid and not expired
# [✓] Backup configuration is tested and working
# [✓] Monitoring and logging are configured
# [✓] Rate limiting is enabled and configured
#
# ==============================================================================
# SECURITY BEST PRACTICES
# ==============================================================================
#
# 1. SECRET MANAGEMENT:
#    - Use AWS Secrets Manager, HashiCorp Vault, or similar
#    - Rotate secrets every 90 days minimum
#    - Use different secrets per environment
#    - Never log secret values
#
# 2. DATABASE SECURITY:
#    - Always use SSL/TLS (sslmode=require)
#    - Use principle of least privilege for DB users
#    - Enable audit logging
#    - Regular security patches
#
# 3. NETWORK SECURITY:
#    - Use VPC/private networks when possible
#    - Implement firewall rules (allow only necessary ports)
#    - Use VPN for administrative access
#    - Enable DDoS protection
#
# 4. APPLICATION SECURITY:
#    - Keep dependencies updated
#    - Run security audits (npm audit)
#    - Implement rate limiting
#    - Use security headers (CSP, HSTS, etc.)
#    - Enable CORS with strict origins
#
# 5. MONITORING:
#    - Set up alerts for errors and anomalies
#    - Monitor resource usage (CPU, memory, disk)
#    - Track security events
#    - Regular log analysis
#
# ==============================================================================
